<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<!-- 配置监听器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 配置springmvc前端控制器 -->
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:springmvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<!-- url-pattern配置方式一：/表示拦截所有请求 -->
		<!-- <url-pattern>/</url-pattern> -->

		<!-- url-pattern配置方式二：配置请求扩展名 -->
		<!-- 优点1：xxx.css、xxx.js、xxx.png等等静态资源完全不经过SpringMVC,不需要特殊处理 优点2：可以实现伪静态效果。表面上看起来是访问一个HTML文件这样的静态资源，但实际上是经过java代码运算处理的结果 
			伪静态作用1：给黑客入侵添加难度 伪静态作用2：有利于SEO优化（让百度、谷歌这样的搜索引擎更容易找到我们的项目） 缺点：不符合RESTFul风格 -->
		<url-pattern>*.html</url-pattern>
		<!-- 为什么要另外再配置json扩展名 如果一个Ajax请求扩展名是html,但实际服务器给浏览器返回的是json数据，二者就不匹配了，会出现406错误 -->
		<url-pattern>*.json</url-pattern>
	</servlet-mapping>
	<!-- 配置字符编码过滤器 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceRequestEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>forceResponseEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>